plugins {
  id 'java'
  id 'java-library'
  id 'java-gradle-plugin'
  id 'groovy'
  id 'idea'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id 'project-report'
  id 'build-dashboard'
  id 'com.gradle.plugin-publish' version '1.2.1'
  id 'com.github.spotbugs' version '5.0.14'
  id 'org.owasp.dependencycheck' version '8.2.1'
  id 'org.sonarqube' version '4.2.0.3129'
}

def javaVersion = JavaVersion.VERSION_17

wrapper {
  gradleVersion = '8.1.1'
  distributionType = Wrapper.DistributionType.BIN
  distributionSha256Sum = 'e111cb9948407e26351227dabce49822fb88c37ee72f1d1582a69c68af2e702f'
}

repositories {
  mavenCentral()
  mavenLocal()
}

java {
  sourceCompatibility = javaVersion
  targetCompatibility = JavaVersion.VERSION_1_8

  withSourcesJar()
}

jar {
  def manifestAttributes = [
    'Created-By'              : "Gradle ${project.gradle.gradleVersion}",
    'Specification-Title'     : "${project.description}",
    'Specification-Version'   : "${project.version}",
    'Specification-Vendor'    : "${project.property('author')} <${project.property('email')}>",
    'Implementation-Title'    : "${project.description}",
    'Implementation-Version'  : "${project.version}",
    'Implementation-Vendor'   : "${project.property('author')} <${project.property('email')}>",
    'Implementation-Vendor-Id': "${project.property('author')} <${project.property('email')}>",
  ]
  manifest {
    attributes(manifestAttributes)
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }

  project {
    vcs = 'Git'
    jdkName = "jdk-${javaVersion}"
    languageLevel = JavaVersion.VERSION_1_8
  }
}

checkstyle {
  toolVersion = property('checkstyleVersion')
  ignoreFailures = false
}

pmd {
  consoleOutput = true
  incrementalAnalysis = true
  toolVersion = property('pmdVersion')
  ignoreFailures = false
  ruleSets = []
  ruleSetConfig = resources.text.fromFile('config/pmd/pmd-rules.xml')
}

spotbugs {
  toolVersion = property('spotbugsVersion')
  ignoreFailures = false
  effort = 'max'
  reportLevel = 'low'
  //noinspection GroovyAssignabilityCheck
  excludeFilter = rootProject.file('config/spotbugs/excludeFilter.xml')
}

spotbugsMain {
  reports {
    html {
      outputLocation = project.layout.buildDirectory.file('reports/spotbugs/main/spotbugs.html').get().asFile
      stylesheet = 'fancy-hist.xsl'
    }
    xml {
      outputLocation = project.layout.buildDirectory.file('reports/spotbugs/main/spotbugs.xml').get().asFile
    }
  }
}

spotbugsTest.enabled = false

jacoco {
  toolVersion = property('jacocoVersion')
}

jacocoTestReport {
  dependsOn project.tasks.test
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'INSTRUCTION'
        minimum = 0.7
      }
      limit {
        counter = 'BRANCH'
        minimum = 0.7
      }
      limit {
        counter = 'LINE'
        minimum = 0.7
      }
      limit {
        counter = 'METHOD'
        minimum = 0.7
      }
      limit {
        counter = 'CLASS'
        minimum = 0.7
      }
    }
  }
}

dependencyCheck {
  autoUpdate = true
  failBuildOnCVSS = 1
  cveValidForHours = 1
  format = 'ALL'
  outputDirectory = project.layout.buildDirectory.dir('reports/dependency-check').get().asFile
  suppressionFile = project.rootProject.file('config/dependency-check/suppressions.xml')
  //noinspection GroovyAssignabilityCheck
  analyzers {
    experimentalEnabled = true
    archiveEnabled = true
    jarEnabled = true
    centralEnabled = true
    nexusEnabled = false
    nexusUsesProxy = false
    nuspecEnabled = false
    assemblyEnabled = false
    msbuildEnabled = false
    golangDepEnabled = false
    golangModEnabled = false
    cocoapodsEnabled = false
    swiftEnabled = false
    swiftPackageResolvedEnabled = false
    bundleAuditEnabled = false
    pyDistributionEnabled = false
    pyPackageEnabled = false
    rubygemsEnabled = false
    opensslEnabled = false
    cmakeEnabled = false
    autoconfEnabled = false
    composerEnabled = false
    cpanEnabled = false
    nodeEnabled = false
  }
}

publishing {
  publications {
    //noinspection GroovyAssignabilityCheck
    mavenJava(MavenPublication) {
      //noinspection GroovyAssignabilityCheck
      from project.components.java
      pom {
        //noinspection GroovyAssignabilityCheck
        name = project.name
        description = project.description
        //noinspection GroovyAssignabilityCheck
        url = project.property('url')
        licenses {
          //noinspection GroovyAssignabilityCheck
          license {
            //noinspection GroovyAssignabilityCheck
            name = project.property('license')
            //noinspection GroovyAssignabilityCheck
            url = project.property('licenseUrl')
          }
        }
        developers {
          developer {
            //noinspection GroovyAssignabilityCheck
            id = project.property('authorId')
            //noinspection GroovyAssignabilityCheck
            name = project.property('author')
            //noinspection GroovyAssignabilityCheck
            email = project.property('email')
          }
        }
        scm {
          //noinspection GroovyAssignabilityCheck
          connection = "scm:git:git://${project.property('scmUrl')}"
          //noinspection GroovyAssignabilityCheck
          developerConnection = "scm:git:ssh://${project.property('scmUrl')}"
          //noinspection GroovyAssignabilityCheck
          url = project.property('url')
        }
      }
    }
  }

  repositories {
    if (System.getenv('CI') == 'true') {
      maven {
        name = 'GitHubPackages'
        url = property('ghpUrl')
        credentials {
          username = System.getenv('GITHUB_ACTOR')
          password = System.getenv('GITHUB_TOKEN')
        }
      }
    } else {
      maven {
        url = project.layout.buildDirectory.dir('repos')
      }
    }
  }
}

signing {
  if (System.getenv('GPG_KEY_ID') && System.getenv('GPG_KEY') && System.getenv('GPG_PASSPHRASE')) {
    useInMemoryPgpKeys(System.getenv('GPG_KEY_ID'), System.getenv('GPG_KEY'), System.getenv('GPG_PASSPHRASE'))
    sign publishing.publications
  }
}

gradlePlugin {
  website = 'https://github.com/gregoranders/gradle-project-configuration'
  vcsUrl = 'https://github.com/gregoranders/gradle-project-configuration'
  plugins {
    projectConfigurationPlugin {
      id = 'io.github.gregoranders.project-configuration'
      implementationClass = 'io.github.gregoranders.gradle.project.ProjectConfigurationPlugin'
      displayName = project.property('pluginDisplayName')
      description = project.property('pluginDescription')
      tags.set(['project', 'configuration', 'java', 'checkstyle', 'pmd', 'spotbugs', 'jacoco', 'dependencycheck'])
    }
  }
}

test {
  doFirst {
    def version = project.extensions.findByType(JacocoPluginExtension.class).toolVersion
    def configuration = configurations.create('jacocoRuntime').setVisible(false).setDescription('JaCoCo agent runtime')
    configuration.dependencies.add(project.dependencies.create("org.jacoco:org.jacoco.agent:$version:runtime"))
    def runtimeAsFile = project.configurations.jacocoRuntime.resolve()[0]
    //noinspection GroovyAssignabilityCheck
    def jvmArgs = "-javaagent:${runtimeAsFile}=destfile=${project.layout.buildDirectory.file('jacoco/test.exec').get().toString()}"
    def file = project.layout.buildDirectory.file('resources/test/jacocoAgentJVMArgs.properties').get().asFile
    file.write(jvmArgs)
  }
  useJUnitPlatform()
  testLogging {
    events 'passed', 'skipped', 'failed'
  }
  systemProperty 'com.athaydes.spockframework.report.projectName', "${project.group}.${project.name}"
  systemProperty 'com.athaydes.spockframework.report.projectVersion', "${project.version}"
  finalizedBy project.tasks.jacocoTestReport
}

check {
  dependsOn project.tasks.jacocoTestCoverageVerification
//  dependsOn project.tasks.dependencyCheckAnalyze
}

configurations.configureEach {
  exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
}

dependencies {

  implementation(
    gradleApi(),
  )

  testImplementation(
    gradleTestKit(),
    localGroovy(),
    // [group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.15']
  )

  testImplementation(
    [group: 'org.spockframework', name: 'spock-core', version: property('spockVersion')],
  ) {
    exclude group: 'org.codehaus.groovy'
  }

  testRuntimeOnly(
    [group: 'com.athaydes', name: 'spock-reports', version: property('spockReportsVersion')]
  ) {
    transitive = false
  }

  testRuntimeOnly(
    [group: 'org.slf4j', name: 'slf4j-api', version: property('slf4jApiVersion')],
    [group: 'org.slf4j', name: 'slf4j-simple', version: property('slf4jApiVersion')]
  )
}
